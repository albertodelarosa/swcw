require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Dashboard::DashboardsController do

  # This should return the minimal set of attributes required to create a valid
  # Dashboard::Dashboard. As you add validations to Dashboard::Dashboard, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "index" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Dashboard::DashboardsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  login_user

  describe "GET index" do

    it "assigns all current_user's appointments as @appointments" do
      appointments = @user.appointments
      get :index
      assigns(:appointments).should eq(appointments)
    end

    it "assigns an empty array as @appointments" do
      appointments = []
      get :index
      assigns(:appointments).should eq(appointments)
    end

    it "assigns an new Appointment as @appointment" do
      get :index
      assigns(:appointment).should be_a_new(Appointment)
    end

    it "assigns all current_user's sites as @sites" do
      sites = @user.sites
      get :index
      assigns(:sites).should eq(sites)
    end

    it "assigns an empty array as @sites" do
      sites = []
      get :index
      assigns(:sites).should eq(sites)
    end

    it "assigns an new Site as @site" do
      get :index
      assigns(:site).should be_a_new(Site)
    end

    it "assigns all current_user's companies as @companies" do
      companies = @user.companies
      get :index
      assigns(:companies).should eq(companies)
    end

    it "assigns an empty array as @companies" do
      companies = []
      get :index
      assigns(:companies).should eq(companies)
    end

    it "assigns an new Company as @company" do
      get :index
      assigns(:company).should be_a_new(Company)
    end

    it "assigns all current_user's vehicles as @vehicles" do
      vehicles = @user.vehicles
      get :index
      assigns(:vehicles).should eq(vehicles)
    end

    it "assigns an empty array as @vehicles" do
      vehicles = []
      get :index
      assigns(:vehicles).should eq(vehicles)
    end

    it "assigns an new Vehicle as @vehicle" do
      get :index
      assigns(:vehicle).should be_a_new(Vehicle)
    end

    it "assigns an all VehicleYears as @years" do
      vehicle_year = VehicleYear.create!
      get :index
      assigns(:years).should eq([vehicle_year])
    end

    it "assigns an empty array as @makes" do
      makes = []
      get :index
      assigns(:makes).should eq(makes)
    end

    it "assigns an empty array as @models" do
      models = []
      get :index
      assigns(:models).should eq(models)
    end

    it "assigns an empty array as @trims" do
      trims = []
      get :index
      assigns(:trims).should eq(trims)
    end

    it "assigns an empty array as @types" do
      types = []
      get :index
      assigns(:types).should eq(types)
    end

    it "assigns an empty array as @doors" do
      doors = []
      get :index
      assigns(:doors).should eq(doors)
    end

    it "assigns an empty array as @sizes" do
      sizes = []
      get :index
      assigns(:sizes).should eq(sizes)
    end

  end

end
