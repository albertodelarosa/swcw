// This file is NOT automatically converted and must be manually merged
@import "mixins-utilities";

// Placeholder text
@mixin material-placeholder() {
  &::-moz-placeholder {@content; } // Firefox
  &:-ms-input-placeholder {@content; } // Internet Explorer 10+
  &::-webkit-input-placeholder  {@content; } // Safari and Chrome
}


// variations(unquote(""), background-color, #FFF);
@mixin variations($component, $selector-suffix, $mdb-param-1, $color-default) {
  @include generic-variations($component, $selector-suffix, $color-default, "variations-content", $mdb-param-1);
}

@mixin variations-content($args) {
  //@debug "#{map-get($args, mixin-name)}{ #{map-get($args, material-param-1)}: #{map-get($args, variation-color)}; }";
  //@debug "#{inspect($args)}";
  //@error "break here";
  #{map-get($args, material-param-1)}: map-get($args, variation-color);
}

@mixin background-variations($component, $selector-suffix, $color-default) {
  @include generic-variations($component, $selector-suffix, $color-default, "background-variations-content", null);
}

@mixin background-variations-content($args) {
  background-color: map-get($args, variation-color);
  @if (map-get($args, variation-color) == $mdb-btn-background-color) {
    color: $mdb-text-color-primary;
  } @else {
    color: map-get($args, variation-color-text);
  }
}

//@mixin text-variations($component, $selector-suffix, $color-default) {
//  @include generic-variations($component, $selector-suffix, $color-default, "text-variations-content", null);
//}
//
//@mixin text-variations-content($args) {
//  color: map-get($args, variation-color);
//}

@mixin button-variations($component, $selector-suffix, $color-default) {
  @include generic-variations($component, $selector-suffix, $color-default, "button-variations-content", 4%);
}

@mixin button-variations-content($args) {
  //@debug "#{inspect($args)}";
  $variation-color: map-get($args, variation-color);
  $mdb-param-1: map-get($args, material-param-1);
  background-color: contrast-color($variation-color,
          darken($variation-color, $mdb-param-1),
          lighten($variation-color, $mdb-param-1));
}

//@mixin bg-color-variations($component, $selector-suffix, $color-default, $mdb-param-1) {
//  @include generic-variations($component, $selector-suffix, $color-default, "bg-color-variations-content", $mdb-param-1);
//}
//
//@mixin bg-color-variations-content($args) {
//  background-color: rgba(map-get($args, variation-color), map-get($args, material-param-1));
//}
//
//// bg-box-shadow-variations(" label input[type=checkbox]:checked + .toggle:active:after", $brand-primary
//@mixin bg-box-shadow-variations($component, $selector-suffix, $color-default) {
//  @include generic-variations($component, $selector-suffix, $color-default, "bg-box-shadow-variations-content", null);
//}
//
//@mixin bg-box-shadow-variations-content($args){
//  $variation-color: map-get($args, variation-color);
//  box-shadow: 0 1px 3px 1px rgba(0,0,0,0.4), 0 0 0 15px rgba($variation-color, (10/100));
//}
//
//// bg-img-variations(" label input[type=checkbox]:checked + .toggle:active:after", $brand-primary
//@mixin bg-img-variations($component, $selector-suffix, $color-default) {
//  @include generic-variations($component, $selector-suffix, $color-default, "bg-img-variations-content", null);
//}
//
//@mixin bg-img-variations-content($args){
//  $variation-color: map-get($args, variation-color);
//  //@debug "bg-img-variations-content called for #{map-get($args, extra)} #{map-get($args, default)} #{map-get($args, variation-color-name)} #{map-get($args, variation-color)}"; //#{inspect($args)}";
//  background-image: linear-gradient($variation-color, $variation-color), linear-gradient($mdb-input-underline-color, $mdb-input-underline-color);
//}

// navbar-variations(" label input[type=checkbox]:checked + .toggle:active:after", $brand-primary
@mixin navbar-variations($component, $selector-suffix, $color-default) {
  @include generic-variations($component, $selector-suffix, $color-default, "navbar-variations-content", null);
}

@mixin navbar-variations-content($args){
  $variation-color: map-get($args, variation-color);
  $variation-color-text: map-get($args, variation-color-text);

  background-color: $variation-color;
  color: $variation-color-text;
  // deeply defined to override welljumbo class without !impotant need
  .navbar-form .form-group input.form-control,
  .navbar-form input.form-control {
    @include material-placeholder {
      color: $variation-color-text;
    }
  }
  .dropdown-menu {
    border-radius: $border-radius-base;
    li > a {
      font-size: $mdb-dropdown-font-size;
      padding: 13px 16px;
      &:hover,
      &:focus {
        color: $variation-color;
        background-color: $grey-200;
      }
    }
    .active > a {
      &:hover,
      &:focus {
        color: $variation-color-text;
      }
      background-color: $variation-color;
      color: $variation-color-text;
    }
  }
}

// alert-variations("", $brand-primary)
@mixin alert-variations($component, $selector-suffix, $color-default) {
  @include generic-variations($component, $selector-suffix, $color-default, "alert-variations-content", null);
}

@mixin alert-variations-content($args){
  $variation-color: map-get($args, variation-color);
  $variation-color-text: map-get($args, variation-color-text);

  background-color: $variation-color;
  color: $variation-color-text;

  a, .alert-link {
    color: $variation-color-text;
  }
}

@mixin md-variation($component, $selector-suffix:"") {
  $mixin-name: "#{$component}-variations-content";
  $component: ".#{$component}";
  @include extra-variations($component, $selector-suffix, $mixin-name);
}

@mixin section-variations-content($args){
  $background-color: map-get($args, variation-color);
  $text-color:       map-get($args, variation-color-text);
  $border-color:     map-get($args, variation-color-border);

  background-color: $background-color;
  color:            $text-color;
  border: 1px solid $border-color;

  &.sidebar {
    & .nav > li > a {
      color: $text-color;
      &:visited { color: $text-color; }
      &:hover, &:focus,&:active {
        //color: $background-color;
        background: lighten($background-color, 5%);
        //box-shadow: 0 1px 6px 0 rgba(255, 255, 255, 0.12), 0 1px 6px 0 rgba(255, 255, 255, 0.12);
      }
    }
  }

  & legend, .legend {
    color: lighten($text-color, 20%);
    border-bottom: 1px solid $border-color;
  }

  //& ul > .panel > p.collapsed { border: 1px solid lighten($background-color, 25); }
  .panel.splash-page {
    background-color: lighten($background-color, 3) !important;
    color: lighten($background-color, 50) !important;

    a, a:focus, a:active {
      color: lighten($background-color, 50);
      text-decoration: none!important;
      & :hover {
        color: lighten($background-color, 35);
      }
    }

    & > a > div.splash-page {
        border: 1px solid lighten($background-color, 25);
    }

    & > div > p,
    & > div > ul > p,
    & > div > ul > li > p,
    & > div > ul > li > ul > p,
    & > div > ul > li > ul > li > p {
      margin: 0px;
      padding: 8px 10px 0px 10px;
      min-height: 32px;
      border: none;
      font-weight: normal;
    }
  }

}


@mixin form-variations-content($args){
  $background-color: map-get($args, variation-color);
  $text-color:       map-get($args, variation-color-text);
  $border-color:     map-get($args, variation-color-border);

  background-color: $background-color;
  color:            $text-color;
  border: 1px solid $border-color;

}



// interpolation of mixin-name is not allowed evidently, so we statically include based on the mixin-name given
@mixin call-variations-content-mixin($args) {
  $mixin-name: map-get($args, mixin-name);
  @if $mixin-name == variations-content {
    @include variations-content($args);
  } @else if $mixin-name == background-variations-content {
    @include background-variations-content($args);
  } @else if $mixin-name == text-variations-content {
    @include text-variations-content($args);
  } @else if $mixin-name == button-variations-content {
    @include button-variations-content($args);
  } @else if $mixin-name == bg-color-variations-content {
    @include bg-color-variations-content($args);
  } @else if $mixin-name == bg-box-shadow-variations-content {
    @include bg-box-shadow-variations-content($args);
  } @else if $mixin-name == bg-img-variations-content {
    @include bg-img-variations-content($args);
  } @else if $mixin-name == navbar-variations-content {
    @include navbar-variations-content($args);
  }@else if $mixin-name == alert-variations-content {
    @include alert-variations-content($args);
  }@else if $mixin-name == section-variations-content {
    @include section-variations-content($args);
  }@else if $mixin-name == form-variations-content {
    @include form-variations-content($args);
  } @else {
    @error "Unknown mixin: #{$mixin-name}"
  }
}

//
// To use this mixin you should pass a function as final parameter to define
// the style. In that definition you can use the following variables to define it.
//
// $variation-color-name ---> "red", "green", "indigo" ...
// $variation-color-full-name ---> "red", "green-50", "indigo-400" ...
// $variation-color ---> #f44336, #e8f5e9, #5c6bc0 ...
// $variation-color-text ---> rgba(255,255,255,0.84), rgba(0,0,0,0.84), rgba(255,255,255,0.84) ...
//

@mixin extra-variations( $component, $selector-suffix, $mixin-name ){
  $args: (mixin-name: $mixin-name);

  &#{$component}-default {
    $args-default: map-merge($args, (
            variation-color:        $brand-default,
            variation-color-text:   $brand-default-color,
            variation-color-border: $brand-default
    ));
    @include call-variations-content-mixin($args-default);

    &#{$component}-dark {
      $args-default-dark: map-merge($args, (
              variation-color:        $brand-default-dark,
              variation-color-text:   $brand-default-dark-color,
              variation-color-border: $brand-default-dark-border
      ));
      @include call-variations-content-mixin($args-default-dark);
    }

    &#{$component}-light {
      $args-default-light: map-merge($args, (
              variation-color:        $brand-default-light,
              variation-color-text:   $brand-default-light-color,
              variation-color-border: $brand-default-light-border
      ));
      @include call-variations-content-mixin($args-default-light);
    }

    &#{$component}-outline {
      $args-default-outline: map-merge($args, (
              variation-color:        $brand-default-outline,
              variation-color-text:   $brand-default-outline-color,
              variation-color-border: $brand-default-outline-border
      ));
      @include call-variations-content-mixin($args-default-outline);
    }

    &#{$component}-lightest-grey {
      $args-default-lightest-grey: map-merge($args, (
              variation-color:        $brand-default-lightest-grey,
              variation-color-text:   $brand-default-lightest-grey-color,
              variation-color-border: $brand-default-lightest-grey-border
      ));
      @include call-variations-content-mixin($args-default-lightest-grey);
    }

    &.section-light {
      border: none;
    }
  }

  &#{$component}-primary {
    $args-primary: map-merge($args, (
            variation-color: $brand-primary,
            variation-color-text: $brand-primary-color,
            variation-color-border:$brand-primary
    ));
    @include call-variations-content-mixin($args-primary);

    &#{$component}-dark {
      $args-primary-dark: map-merge($args, (
              variation-color:        $brand-primary-dark,
              variation-color-text:   $brand-primary-dark-color,
              variation-color-border: $brand-primary-dark-border
      ));
      @include call-variations-content-mixin($args-primary-dark);
    }

    &#{$component}-light {
      $args-primary-light: map-merge($args, (
              variation-color:        $brand-primary-light,
              variation-color-text:   $brand-primary-light-color,
              variation-color-border: $brand-primary-light-border
      ));
      @include call-variations-content-mixin($args-primary-light);
    }

    &#{$component}-outline {
      $args-primary-outline: map-merge($args, (
              variation-color:        $brand-primary-outline,
              variation-color-text:   $brand-primary-outline-color,
              variation-color-border: $brand-primary-outline-border
      ));
      @include call-variations-content-mixin($args-primary-outline);
    }

    &#{$component}-lightest-grey {
      $args-primary-lightest-grey: map-merge($args, (
              variation-color:        $brand-primary-lightest-grey,
              variation-color-text:   $brand-primary-lightest-grey-color,
              variation-color-border: $brand-primary-lightest-grey-border
      ));
      @include call-variations-content-mixin($args-primary-lightest-grey);
    }

    &.section-light {
      border: none;
    }
  }

  &#{$component}-info {
    $args-info: map-merge($args, (
            variation-color: $brand-info,
            variation-color-text: $brand-info-color,
            variation-color-border:$brand-info
    ));
    @include call-variations-content-mixin($args-info);

    &#{$component}-dark {
      $args-info-dark: map-merge($args, (
              variation-color:        $brand-info-dark,
              variation-color-text:   $brand-info-dark-color,
              variation-color-border: $brand-info-dark-border
      ));
      @include call-variations-content-mixin($args-info-dark);
    }

    &#{$component}-light {
      $args-info-light: map-merge($args, (
              variation-color:        $brand-info-light,
              variation-color-text:   $brand-info-light-color,
              variation-color-border: $brand-info-light-border
      ));
      @include call-variations-content-mixin($args-info-light);
    }

    &#{$component}-outline {
      $args-info-outline: map-merge($args, (
              variation-color:        $brand-info-outline,
              variation-color-text:   $brand-info-outline-color,
              variation-color-border: $brand-info-outline-border
      ));
      @include call-variations-content-mixin($args-info-outline);
    }

    &#{$component}-lightest-grey {
      $args-info-lightest-grey: map-merge($args, (
              variation-color:        $brand-info-lightest-grey,
              variation-color-text:   $brand-info-lightest-grey-color,
              variation-color-border: $brand-info-lightest-grey-border
      ));
      @include call-variations-content-mixin($args-info-lightest-grey);
    }

    &#{$component}-parallax, .parallax-reverse, .parallax {
      border: none !important;
    }
    &.section-light {
      border: none;
    }
  }

  &#{$component}-success {
    $args-success: map-merge($args, (
            variation-color: $brand-success,
            variation-color-text: $brand-success-color,
            variation-color-border:$brand-success
    ));
    @include call-variations-content-mixin($args-success);

    &#{$component}-dark {
      $args-success-dark: map-merge($args, (
              variation-color:        $brand-success-dark,
              variation-color-text:   $brand-success-dark-color,
              variation-color-border: $brand-success-dark-border
      ));
      @include call-variations-content-mixin($args-success-dark);
    }

    &#{$component}-light {
      $args-success-light: map-merge($args, (
              variation-color:        $brand-success-light,
              variation-color-text:   $brand-success-light-color,
              variation-color-border: $brand-success-light-border
      ));
      @include call-variations-content-mixin($args-success-light);
    }

    &#{$component}-outline {
      $args-success-outline: map-merge($args, (
              variation-color:        $brand-success-outline,
              variation-color-text:   $brand-success-outline-color,
              variation-color-border: $brand-success-outline-border
      ));
      @include call-variations-content-mixin($args-success-outline);
    }

    &#{$component}-lightest-grey {
      $args-success-lightest-grey: map-merge($args, (
              variation-color:        $brand-success-lightest-grey,
              variation-color-text:   $brand-success-lightest-grey-color,
              variation-color-border: $brand-success-lightest-grey-border
      ));
      @include call-variations-content-mixin($args-success-lightest-grey);
    }

    &.section-light {
      border: none;
    }
  }

  &#{$component}-warning {
    $args-warning: map-merge($args, (
            variation-color: $brand-warning,
            variation-color-text: $brand-warning-color,
            variation-color-border:$brand-warning
    ));
    @include call-variations-content-mixin($args-warning);

    &#{$component}-dark {
      $args-warning-dark: map-merge($args, (
              variation-color:        $brand-warning-dark,
              variation-color-text:   $brand-warning-dark-color,
              variation-color-border: $brand-warning-dark-border
      ));
      @include call-variations-content-mixin($args-warning-dark);
    }

    &#{$component}-light {
      $args-warning-light: map-merge($args, (
              variation-color:        $brand-warning-light,
              variation-color-text:   $brand-warning-light-color,
              variation-color-border: $brand-warning-light-border
      ));
      @include call-variations-content-mixin($args-warning-light);
    }

    &#{$component}-outline {
      $args-warning-outline: map-merge($args, (
              variation-color:        $brand-warning-outline,
              variation-color-text:   $brand-warning-outline-color,
              variation-color-border: $brand-warning-outline-border
      ));
      @include call-variations-content-mixin($args-warning-outline);
    }

    &#{$component}-lightest-grey {
      $args-warning-lightest-grey: map-merge($args, (
              variation-color:        $brand-warning-lightest-grey,
              variation-color-text:   $brand-warning-lightest-grey-color,
              variation-color-border: $brand-warning-lightest-grey-border
      ));
      @include call-variations-content-mixin($args-warning-lightest-grey);
    }

    &.section-light {
      border: none;
    }
  }

  &#{$component}-danger {
    $args-danger: map-merge($args, (
            variation-color: $brand-danger,
            variation-color-text: $brand-danger-color,
            variation-color-border:$brand-danger
    ));
    @include call-variations-content-mixin($args-danger);

    &#{$component}-dark {
      $args-danger-dark: map-merge($args, (
              variation-color:        $brand-danger-dark,
              variation-color-text:   $brand-danger-dark-color,
              variation-color-border: $brand-danger-dark-border
      ));
      @include call-variations-content-mixin($args-danger-dark);
    }

    &#{$component}-light {
      $args-danger-light: map-merge($args, (
              variation-color:        $brand-danger-light,
              variation-color-text:   $brand-danger-light-color,
              variation-color-border: $brand-danger-light-border
      ));
      @include call-variations-content-mixin($args-danger-light);
    }

    &#{$component}-outline {
      $args-danger-outline: map-merge($args, (
              variation-color:        $brand-danger-outline,
              variation-color-text:   $brand-danger-outline-color,
              variation-color-border: $brand-danger-outline-border
      ));
      @include call-variations-content-mixin($args-danger-outline);
    }

    &#{$component}-lightest-grey {
      $args-danger-lightest-grey: map-merge($args, (
              variation-color:        $brand-danger-lightest-grey,
              variation-color-text:   $brand-danger-lightest-grey-color,
              variation-color-border: $brand-danger-lightest-grey-border
      ));
      @include call-variations-content-mixin($args-danger-lightest-grey);
    }

    &.section-light {
      border: none;
    }

  }
  &#{$component}-parallax, &.parallax-reverse, &.parallax,
  &.section-light {
    border: none;
  }

}

@mixin generic-variations($component, $selector-suffix, $color-default, $mixin-name, $mdb-param-1) {

  //setup map to pass parameters (instead of the incredibly long-error-prone list for each and every @include)
  $args: (
          //extra: $selector-suffix,
          //default: $color-default,
          mixin-name: $mixin-name,
          material-param-1: $mdb-param-1
  );


  // bootstrap styles
  &#{$selector-suffix},
  &#{$component}-default#{$selector-suffix} {

    $args-extra: map-merge($args, (
            variation-color: $color-default,
            variation-color-text: $mdb-text-color-light
    ));
    @include call-variations-content-mixin($args-extra);
  }
  &#{$component}-inverse#{$selector-suffix} {
    $args-inverse: map-merge($args, (
            variation-color: $mdb-brand-inverse,
            variation-color-text: contrast-color($mdb-brand-inverse, $mdb-text-color-primary-hex, $mdb-text-color-light-hex)
    ));
    @include call-variations-content-mixin($args-inverse);
  }
  &#{$component}-primary#{$selector-suffix} {
    $args-primary: map-merge($args, (
            variation-color: $brand-primary,
            variation-color-text: $mdb-text-color-light
    ));
    @include call-variations-content-mixin($args-primary);
  }
  &#{$component}-success#{$selector-suffix} {
    $args-success: map-merge($args, (
            variation-color: $brand-success,
            variation-color-text: $mdb-text-color-light
    ));
    @include call-variations-content-mixin($args-success);
  }
  &#{$component}-info#{$selector-suffix} {
    $args-info: map-merge($args, (
            variation-color: $brand-info,
            variation-color-text: $mdb-text-color-light
    ));
    @include call-variations-content-mixin($args-info);
  }
  &#{$component}-warning#{$selector-suffix} {
    $args-warning: map-merge($args, (
            variation-color: $brand-warning,
            variation-color-text: $mdb-text-color-light
    ));
    @include call-variations-content-mixin($args-warning);
  }
  &#{$component}-danger#{$selector-suffix} {
    $args-danger: map-merge($args, (
            variation-color: $brand-danger,
            variation-color-text: $mdb-text-color-light
    ));
    @include call-variations-content-mixin($args-danger);
  }

}
